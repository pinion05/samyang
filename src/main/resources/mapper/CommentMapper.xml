<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="com.farm404.samyang.mapper.CommentMapper">

    <resultMap id="commentResultMap" type="com.farm404.samyang.dto.CommentDTO">
        <id property="commentId" column="comment_id"/>
        <result property="userId" column="user_id"/>
        <result property="relatedId" column="related_id"/>
        <result property="relatedType" column="related_type"/>
        <result property="content" column="content"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="userName" column="user_name"/>
        <result property="relatedTitle" column="related_title"/>
    </resultMap>
    
    <!-- 댓글 등록 -->
    <insert id="insertComment" parameterType="com.farm404.samyang.dto.CommentDTO">
        INSERT INTO comment (user_id, related_id, related_type, content, created_at)
        VALUES (#{userId}, #{relatedId}, #{relatedType}, #{content}, NOW())
    </insert>
    
    <!-- 댓글 ID로 조회 -->
    <select id="selectCommentById" parameterType="int" resultMap="commentResultMap">
        SELECT c.*, u.name as user_name,
            CASE 
                WHEN c.related_type = 'CROP' THEN (SELECT crop_name FROM crop WHERE crop_id = c.related_id)
                WHEN c.related_type = 'DIARY' THEN (SELECT title FROM farmingdiary WHERE diary_id = c.related_id)
                WHEN c.related_type = 'REVIEW' THEN (SELECT CONCAT('리뷰 #', review_id) FROM review WHERE review_id = c.related_id)
            END as related_title
        FROM comment c
        LEFT JOIN user u ON c.user_id = u.id
        WHERE c.comment_id = #{commentId}
    </select>
    
    <!-- 특정 컨텐츠의 댓글 목록 조회 -->
    <select id="selectCommentsByRelated" resultMap="commentResultMap">
        SELECT c.*, u.name as user_name
        FROM comment c
        LEFT JOIN user u ON c.user_id = u.id
        WHERE c.related_id = #{relatedId} 
        AND c.related_type = #{relatedType}
        ORDER BY c.created_at DESC
    </select>
    
    <!-- 사용자의 댓글 목록 조회 -->
    <select id="selectCommentsByUserId" parameterType="int" resultMap="commentResultMap">
        SELECT c.*, u.name as user_name,
            CASE 
                WHEN c.related_type = 'CROP' THEN (SELECT crop_name FROM crop WHERE crop_id = c.related_id)
                WHEN c.related_type = 'DIARY' THEN (SELECT title FROM farmingdiary WHERE diary_id = c.related_id)
                WHEN c.related_type = 'REVIEW' THEN (SELECT CONCAT('리뷰 #', review_id) FROM review WHERE review_id = c.related_id)
            END as related_title
        FROM comment c
        LEFT JOIN user u ON c.user_id = u.id
        WHERE c.user_id = #{userId}
        ORDER BY c.created_at DESC
    </select>
    
    <!-- 모든 댓글 조회 (관리자용) -->
    <select id="selectAllComments" resultMap="commentResultMap">
        SELECT c.*, u.name as user_name,
            CASE 
                WHEN c.related_type = 'CROP' THEN (SELECT crop_name FROM crop WHERE crop_id = c.related_id)
                WHEN c.related_type = 'DIARY' THEN (SELECT title FROM farmingdiary WHERE diary_id = c.related_id)
                WHEN c.related_type = 'REVIEW' THEN (SELECT CONCAT('리뷰 #', review_id) FROM review WHERE review_id = c.related_id)
            END as related_title
        FROM comment c
        LEFT JOIN user u ON c.user_id = u.id
        ORDER BY c.created_at DESC
    </select>
    
    <!-- 댓글 수정 -->
    <update id="updateComment" parameterType="com.farm404.samyang.dto.CommentDTO">
        UPDATE comment
        SET content = #{content},
            updated_at = NOW()
        WHERE comment_id = #{commentId}
    </update>
    
    <!-- 댓글 삭제 -->
    <delete id="deleteComment" parameterType="int">
        DELETE FROM comment
        WHERE comment_id = #{commentId}
    </delete>
    
    <!-- 특정 컨텐츠의 댓글 수 조회 -->
    <select id="countCommentsByRelated" resultType="int">
        SELECT COUNT(*)
        FROM comment
        WHERE related_id = #{relatedId} 
        AND related_type = #{relatedType}
    </select>
    
    <!-- 최근 댓글 조회 -->
    <select id="selectRecentComments" resultMap="commentResultMap">
        SELECT c.*, u.name as user_name,
            CASE 
                WHEN c.related_type = 'CROP' THEN (SELECT crop_name FROM crop WHERE crop_id = c.related_id)
                WHEN c.related_type = 'DIARY' THEN (SELECT title FROM farmingdiary WHERE diary_id = c.related_id)
                WHEN c.related_type = 'REVIEW' THEN (SELECT CONCAT('리뷰 #', review_id) FROM review WHERE review_id = c.related_id)
            END as related_title
        FROM comment c
        LEFT JOIN user u ON c.user_id = u.id
        ORDER BY c.created_at DESC
        LIMIT #{limit}
    </select>
    
</mapper>