<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.farm404.samyang.mapper.ReviewMapper">
    
    <!-- 리뷰 조회 -->
    <!-- TODO: [최소수정] resultType 전체 경로 지정 필요 -->
    <select id="selectReviewById" resultType="com.farm404.samyang.dto.ReviewDTO">
        SELECT 
            /* TODO: [DB매핑오류] Review 테이블은 OrderItemID를 참조하지만 
               OrderItem 테이블이 없고, Product 테이블도 없음
               현재 Crop 테이블과 조인 시도 중 */
            r.ReviewID as reviewId,
            r.UserID as userId,
            r.OrderItemID as productId,  -- OrderItemID를 productId로 임시 매핑
            r.Rating as rating,
            r.Comment as comment,
            r.CreatedAt as createdAt,
            NULL as updatedAt,  -- Review 테이블에 UpdatedAt 없음
            u.Name AS userName,
            c.CropName AS productName
        FROM Review r
        LEFT JOIN User u ON r.UserID = u.UserID
        LEFT JOIN Crop c ON r.OrderItemID = c.CropID  -- 임시로 Crop과 조인
        WHERE r.ReviewID = #{reviewId}
    </select>
    
    <!-- 사용자별 리뷰 목록 조회 -->
    <select id="selectReviewsByUserId" resultType="com.farm404.samyang.dto.ReviewDTO">
        SELECT 
            r.ReviewID as reviewId,
            r.UserID as userId,
            r.OrderItemID as productId,
            r.Rating as rating,
            r.Comment as comment,
            r.CreatedAt as createdAt,
            NULL as updatedAt,
            u.Name AS userName,
            c.CropName AS productName
        FROM Review r
        LEFT JOIN User u ON r.UserID = u.UserID
        LEFT JOIN Crop c ON r.OrderItemID = c.CropID
        WHERE r.UserID = #{userId}
        ORDER BY r.CreatedAt DESC
    </select>
    
    <!-- 상품별 리뷰 목록 조회 -->
    <select id="selectReviewsByProductId" resultType="com.farm404.samyang.dto.ReviewDTO">
        SELECT 
            r.ReviewID as reviewId,
            r.UserID as userId,
            r.OrderItemID as productId,
            r.Rating as rating,
            r.Comment as comment,
            r.CreatedAt as createdAt,
            NULL as updatedAt,
            u.Name AS userName,
            c.CropName AS productName
        FROM Review r
        LEFT JOIN User u ON r.UserID = u.UserID
        LEFT JOIN Crop c ON r.OrderItemID = c.CropID
        WHERE r.OrderItemID = #{productId}
        ORDER BY r.CreatedAt DESC
    </select>
    
    <!-- 모든 리뷰 조회 -->
    <select id="selectAllReviews" resultType="com.farm404.samyang.dto.ReviewDTO">
        SELECT 
            r.ReviewID as reviewId,
            r.UserID as userId,
            r.OrderItemID as productId,
            r.Rating as rating,
            r.Comment as comment,
            r.CreatedAt as createdAt,
            NULL as updatedAt,
            u.Name AS userName,
            c.CropName AS productName
        FROM Review r
        LEFT JOIN User u ON r.UserID = u.UserID
        LEFT JOIN Crop c ON r.OrderItemID = c.CropID
        ORDER BY r.CreatedAt DESC
    </select>
    
    <!-- 평점별 리뷰 조회 -->
    <select id="selectReviewsByRating" resultType="com.farm404.samyang.dto.ReviewDTO">
        SELECT 
            r.ReviewID as reviewId,
            r.UserID as userId,
            r.OrderItemID as productId,
            r.Rating as rating,
            r.Comment as comment,
            r.CreatedAt as createdAt,
            NULL as updatedAt,
            u.Name AS userName,
            c.CropName AS productName
        FROM Review r
        LEFT JOIN User u ON r.UserID = u.UserID
        LEFT JOIN Crop c ON r.OrderItemID = c.CropID
        WHERE 1=1
        <if test="productId != null">
            AND r.OrderItemID = #{productId}
        </if>
        <if test="rating != null">
            AND r.Rating = #{rating}
        </if>
        ORDER BY r.CreatedAt DESC
    </select>
    
    <!-- 리뷰 등록 -->
    <!-- TODO: [최소수정] parameterType 전체 경로 지정 필요 -->
    <insert id="insertReview" parameterType="com.farm404.samyang.dto.ReviewDTO">
        INSERT INTO Review (
            UserID,
            OrderItemID,  -- TODO: [DB매핑오류] OrderItem 테이블 없음
            Rating,
            Comment,
            CreatedAt
            /* TODO: UpdatedAt 컬럼 없음 */
        ) VALUES (
            #{userId},
            #{productId},  -- productId를 OrderItemID로 임시 매핑
            #{rating},
            #{comment},
            NOW()
        )
    </insert>
    
    <!-- 리뷰 수정 -->
    <update id="updateReview" parameterType="com.farm404.samyang.dto.ReviewDTO">
        UPDATE Review
        SET 
            Rating = #{rating},
            Comment = #{comment}
        WHERE ReviewID = #{reviewId}
    </update>
    
    <!-- 리뷰 삭제 -->
    <delete id="deleteReview">
        DELETE FROM Review
        WHERE ReviewID = #{reviewId}
    </delete>
    
    <!-- 상품의 평균 평점 조회 -->
    <select id="selectAverageRating" resultType="Double">
        SELECT AVG(Rating) AS averageRating
        FROM Review
        WHERE OrderItemID = #{productId}
    </select>
    
    <!-- 상품의 리뷰 개수 조회 -->
    <select id="selectReviewCount" resultType="int">
        SELECT COUNT(*) AS reviewCount
        FROM Review
        WHERE OrderItemID = #{productId}
    </select>
    
    <!-- 사용자가 특정 상품에 리뷰를 작성했는지 확인 -->
    <select id="checkUserReviewed" resultType="int">
        SELECT COUNT(*)
        FROM Review
        WHERE UserID = #{userId}
        AND OrderItemID = #{productId}
    </select>
    
    <!-- 평점별 리뷰 통계 -->
    <select id="selectRatingStatistics" resultType="com.farm404.samyang.dto.ReviewDTO">
        SELECT 
            Rating as rating,
            COUNT(*) AS reviewCount
        FROM Review
        WHERE OrderItemID = #{productId}
        GROUP BY Rating
        ORDER BY Rating DESC
    </select>
    
</mapper>